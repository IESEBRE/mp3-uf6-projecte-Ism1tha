package com.insebre.project.controller;

import com.insebre.project.exception.dao.DAOException;
import com.insebre.project.model.DatabaseConnection;

import javax.swing.*;
import java.io.InputStream;
import java.sql.*;
import java.util.Scanner;

/**
 * The DatabaseConnectionController class handles database connection and related operations.
 */
public class DatabaseConnectionController {

    private final DatabaseConnection databaseConnection;

    /**
     * Constructs a new DatabaseConnectionController instance with the specified DatabaseConnection.
     *
     * @param databaseConnection the DatabaseConnection to use for database operations
     */
    public DatabaseConnectionController(DatabaseConnection databaseConnection) {
        this.databaseConnection = databaseConnection;
    }

    /**
     * Connects to the database and performs necessary setup tasks.
     *
     * @return true if the connection is successful, otherwise false
     */
    public Boolean connect() {
        try {
            databaseConnection.setConnection(DriverManager.getConnection(databaseConnection.getJdbcUrl(), databaseConnection.getUsername(), databaseConnection.getPassword()));

            executeSQLScript("/sql/create_tables_procedure.sql");
            executeSQLScript("/sql/check_and_create_function.sql");

            String result = checkIfTablesCreated();
            if(result.equals("NEW")) {
                JOptionPane.showMessageDialog(null, "Database tables have been created successfully", "Database tables created", JOptionPane.INFORMATION_MESSAGE);
            }

            return true;
        } catch (Exception e) {
            ExceptionController.handleException(new DAOException("Error connecting to database: " + e.getMessage(), e));
        }
        return false;
    }

    /**
     * Executes a SQL query and returns the ResultSet.
     *
     * @param query  the SQL query to execute
     * @param params the parameters to be set in the query
     * @return the ResultSet generated by the query
     * @throws DAOException if there is an error executing the query
     */
    public ResultSet executeQuery(String query, Object... params) throws DAOException {
        Connection connection;
        PreparedStatement statement;
        try {
            connection = databaseConnection.getConnection();
            statement = connection.prepareStatement(query);
            setParameters(statement, params);
            return statement.executeQuery();
        } catch (SQLException e) {
            throw new DAOException("Error executing SQL query: " + e.getMessage(), e);
        }
    }

    /**
     * Sets parameters in a PreparedStatement.
     *
     * @param statement the PreparedStatement to set parameters in
     * @param params    the parameters to set
     * @throws SQLException if a database access error occurs
     */
    private void setParameters(PreparedStatement statement, Object... params) throws SQLException {
        for (int i = 0; i < params.length; i++) {
            statement.setObject(i + 1, params[i]);
        }
    }

    /**
     * Executes a SQL script file.
     *
     * @param filePath the path to the SQL script file
     */
    private void executeSQLScript(String filePath){
        try (Connection conn = DriverManager.getConnection(databaseConnection.getJdbcUrl(), databaseConnection.getUsername(), databaseConnection.getPassword()); Statement stmt = conn.createStatement()) {
            InputStream inputStream = getClass().getResourceAsStream(filePath);
            if (inputStream != null) {
                Scanner scanner = new Scanner(inputStream).useDelimiter("\\A");
                String sql = scanner.hasNext() ? scanner.next() : "";
                scanner.close();
                stmt.execute(sql);
            }
            else {
                throw new DAOException("The SQL script file could not be found");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Checks if tables have been created in the database.
     *
     * @return the result of the check
     * @throws SQLException if a database access error occurs
     */
    private String checkIfTablesCreated() throws SQLException {
        CallableStatement callableStatement = databaseConnection.getConnection().prepareCall("{? = call check_and_create_tables}");
        callableStatement.registerOutParameter(1, Types.VARCHAR);
        callableStatement.execute();
        return callableStatement.getString(1);
    }
}
